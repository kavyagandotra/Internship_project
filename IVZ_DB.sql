  CREATE TABLE "IVZ_PRODUCTS" 
   (	"ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NAME" VARCHAR2(50 CHAR), 
	"DESCRIPTION" VARCHAR2(50 CHAR), 
	"CATEGORY_ID" NUMBER, 
	"SUPPLIER_ID" NUMBER, 
	"PRICE" NUMBER, 
	"COST" NUMBER, 
	"STOCK_QUANTITY" NUMBER, 
	"REORDER_LEVEL" NUMBER, 
	"PRODUCT_CODE" VARCHAR2(30), 
	"STATUS" VARCHAR2(10), 
	"IMAGE_URL" BLOB, 
	 CONSTRAINT "IVZ_PRODUCTS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "IVZ_SALES" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"CUSTOMER_ID" NUMBER, 
	"SALE_DATE" DATE, 
	"TOTAL_AMOUNT" NUMBER, 
	"STATUS" VARCHAR2(20 CHAR), 
	 CONSTRAINT "IVZ_SALES_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "IVZ_SALES_ITEMS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"SALE_ID" NUMBER, 
	"PRODUCT_ID" NUMBER, 
	"QUANTITY" NUMBER, 
	"UNIT_PRICE" NUMBER, 
	"SUBTOTAL_PRICE" NUMBER, 
	 CONSTRAINT "IVZ_SALES_ITEMS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "IVZ_STOCK_TRANSACTIONS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"QUANTITY" NUMBER, 
	"TRANS_DATE" DATE, 
	"TOTAL_AMOUNT" NUMBER, 
	"CUSTOMER_NAME" VARCHAR2(200), 
	"PRODUCT_NAME" VARCHAR2(200), 
	 CONSTRAINT "IVZ_STOCK_TRANSACTIONS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "IVZ_ADJUSTMENTS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"PRODUCT_ID" NUMBER, 
	"USER_ID" NUMBER, 
	"ADJUSTMENT_TYPE" VARCHAR2(10 CHAR), 
	"QUANTITY" NUMBER, 
	"REASON" VARCHAR2(20 CHAR), 
	"ADJUST_DATE" DATE, 
	 CONSTRAINT "IVZ_ADJUSTMENTS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "IVZ_PAYMENTS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"ORDER_ID" NUMBER, 
	"AMOUNT" NUMBER, 
	"PAYMENT_METHOD" VARCHAR2(20 CHAR), 
	"PAYMENT_DATE" DATE, 
	"STATUS" VARCHAR2(20 CHAR), 
	 CONSTRAINT "IVZ_PAYMENTS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "IVZ_USER_MST" 
   (	"USER_ID" NUMBER, 
	"USERNAME" VARCHAR2(50) NOT NULL ENABLE, 
	"PASSWORD" VARCHAR2(200) NOT NULL ENABLE, 
	"FIRSTNAME" VARCHAR2(50), 
	"MIDDLENAME" VARCHAR2(50), 
	"LASTNAME" VARCHAR2(50), 
	"ACCOUNT_STATUS" VARCHAR2(10), 
	"USER_TYPE_ID" NUMBER, 
	"MOBILE_NO" NUMBER, 
	"RECOVERY_EMAIL" VARCHAR2(50), 
	"LAST_LOGIN" TIMESTAMP (6), 
	"CREATED_BY" VARCHAR2(100), 
	"CREATED_ON" TIMESTAMP (6), 
	"UPDATED_BY" VARCHAR2(100), 
	"UPDATED_ON" TIMESTAMP (6), 
	 CONSTRAINT "IVZ_USER_MST_PK" PRIMARY KEY ("USER_ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "IVZ_USER_MST_UNQ_CON" UNIQUE ("USERNAME")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "IVZ_USER_TYPE_MST" 
   (	"USER_TYPE_ID" NUMBER, 
	"USER_TYPE_CODE" VARCHAR2(5), 
	"USER_TYPE_NAME" VARCHAR2(30), 
	"CREATED_BY" VARCHAR2(100), 
	"CREATED_ON" TIMESTAMP (6), 
	"UPDATED_BY" VARCHAR2(100), 
	"UPDATED_ON" TIMESTAMP (6), 
	"STATUS" VARCHAR2(10), 
	 CONSTRAINT "IVZ_USER_TYPE_MST_PK" PRIMARY KEY ("USER_TYPE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "IVZ_CATEGORIES" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NAME" VARCHAR2(20 CHAR), 
	"DESCRIPTION" VARCHAR2(20 CHAR), 
	 CONSTRAINT "IVZ_CATEGORIES_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "IVZ_SUPPLIERS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NAME" VARCHAR2(20 CHAR), 
	"CONTACT_PERSON" VARCHAR2(20 CHAR), 
	"EMAIL" VARCHAR2(70 CHAR), 
	"ADDRESS" VARCHAR2(90 CHAR), 
	"PHONE" NUMBER, 
	 CONSTRAINT "IVZ_SUPPLIERS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "IVZ_CUSTOMERS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NAME" VARCHAR2(20 CHAR), 
	"PHONE" NUMBER, 
	"EMAIL" VARCHAR2(50 CHAR), 
	"ADDRESS" VARCHAR2(200 CHAR), 
	 CONSTRAINT "IVZ_CUSTOMERS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "IVZ_PURCHASES" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"SUPPLIER_ID" NUMBER, 
	"PURCHASE_DATE" NUMBER, 
	"TOTAL_COST" NUMBER, 
	"STATUS" VARCHAR2(20 CHAR), 
	 CONSTRAINT "IVZ_PURCHASES_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "IVZ_PURCHASE_ITEMS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"PURCHASE_ID" NUMBER, 
	"PRODUCT_ID" NUMBER, 
	"QUANTITY" NUMBER, 
	"UNIT_COST" NUMBER, 
	"SUBTOTAL_COST" NUMBER, 
	 CONSTRAINT "IVZ_PURCHASE_ITEMS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

   COMMENT ON COLUMN "IVZ_PURCHASES"."STATUS" IS '(pending,received)';

  ALTER TABLE "IVZ_USER_MST" ADD CONSTRAINT "IVZ_USER_MST_FK" FOREIGN KEY ("USER_TYPE_ID")
	  REFERENCES "IVZ_USER_TYPE_MST" ("USER_TYPE_ID") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "BI_IVZ_USER_MST" 
  before insert on "IVZ_USER_MST"                
  for each row   
begin    
  if :NEW."USER_ID" is null then  
    select "IVZ_USER_MST_SEQ".nextval into :NEW."USER_ID" from sys.dual;  
  end if;  
end; 

/
ALTER TRIGGER "BI_IVZ_USER_MST" ENABLE;
  CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_IVZ_USER_MST_TRG" 
BEFORE INSERT OR UPDATE  ON IVZ_USER_MST   
FOR EACH ROW   
BEGIN   
  	CASE   
    WHEN INSERTING THEN   
    	:new.CREATED_BY := v('APP_USER');   
        :new.CREATED_ON := sysdate;            
    WHEN UPDATING THEN       
    	:new.UPDATED_BY := v('APP_USER');   
        :new.UPDATED_ON := sysdate;   
	END CASE;   
END; 

/
ALTER TRIGGER "BIU_IVZ_USER_MST_TRG" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_IVZ_USER_TYPE_MST_TRG" 
BEFORE INSERT OR UPDATE  ON IVZ_USER_TYPE_MST  
FOR EACH ROW  
BEGIN  
    CASE  
        WHEN INSERTING THEN  
            :new.CREATED_BY :=v('APP_USER');  
            :new.CREATED_ON :=sysdate;           
        WHEN UPDATING THEN  
            :new.UPDATED_BY :=v('APP_USER');  
            :new.UPDATED_ON :=sysdate;  
    END CASE;  
END; 

/
ALTER TRIGGER "BIU_IVZ_USER_TYPE_MST_TRG" ENABLE;
  CREATE OR REPLACE EDITIONABLE TRIGGER "BI_IVZ_USER_TYPE_MST" 
  before insert on "IVZ_USER_TYPE_MST"                
  for each row   
begin    
  if :NEW."USER_TYPE_ID" is null then  
    select "IVZ_USER_TYPE_MST_SEQ".nextval into :NEW."USER_TYPE_ID" from sys.dual;  
  end if;  
end; 

/
ALTER TRIGGER "BI_IVZ_USER_TYPE_MST" ENABLE;






































  CREATE UNIQUE INDEX "IVZ_SALES_PK" ON "IVZ_SALES" ("ID") 
  ;

  CREATE UNIQUE INDEX "IVZ_SALES_ITEMS_PK" ON "IVZ_SALES_ITEMS" ("ID") 
  ;

  CREATE UNIQUE INDEX "IVZ_STOCK_TRANSACTIONS_PK" ON "IVZ_STOCK_TRANSACTIONS" ("ID") 
  ;

  CREATE UNIQUE INDEX "IVZ_ADJUSTMENTS_PK" ON "IVZ_ADJUSTMENTS" ("ID") 
  ;

  CREATE UNIQUE INDEX "IVZ_PAYMENTS_PK" ON "IVZ_PAYMENTS" ("ID") 
  ;

  CREATE UNIQUE INDEX "IVZ_USER_TYPE_MST_PK" ON "IVZ_USER_TYPE_MST" ("USER_TYPE_ID") 
  ;

  CREATE UNIQUE INDEX "IVZ_USER_MST_PK" ON "IVZ_USER_MST" ("USER_ID") 
  ;

  CREATE UNIQUE INDEX "IVZ_USER_MST_UNQ_CON" ON "IVZ_USER_MST" ("USERNAME") 
  ;

  CREATE UNIQUE INDEX "IVZ_PRODUCTS_PK" ON "IVZ_PRODUCTS" ("ID") 
  ;

  CREATE UNIQUE INDEX "IVZ_CATEGORIES_PK" ON "IVZ_CATEGORIES" ("ID") 
  ;

  CREATE UNIQUE INDEX "IVZ_SUPPLIERS_PK" ON "IVZ_SUPPLIERS" ("ID") 
  ;

  CREATE UNIQUE INDEX "IVZ_CUSTOMERS_PK" ON "IVZ_CUSTOMERS" ("ID") 
  ;

  CREATE UNIQUE INDEX "IVZ_PURCHASES_PK" ON "IVZ_PURCHASES" ("ID") 
  ;

  CREATE UNIQUE INDEX "IVZ_PURCHASE_ITEMS_PK" ON "IVZ_PURCHASE_ITEMS" ("ID") 
  ;














create or replace PACKAGE "IVZ_CUSTOM_AUTH" AS   
 
FUNCTION IVZ_AUTH_RIGHT(p_app_user IN VARCHAR, p_usertype IN VARCHAR2)   
RETURN BOOLEAN;  
 
END IVZ_CUSTOM_AUTH; 
/
create or replace PACKAGE "IVZ_CUSTOM_LOGIN" AS   
 
FUNCTION IVZ_login ( 
	p_username IN VARCHAR2,  
	p_password IN VARCHAR2)   
RETURN BOOLEAN;  
 
END IVZ_CUSTOM_LOGIN;
/
create or replace PACKAGE IVZ_ENC_DEC AS 
 
FUNCTION encrypt_pwd (p_text IN VARCHAR2)  
RETURN RAW; 
   
FUNCTION decrypt_pwd (p_raw IN RAW)  
RETURN VARCHAR2; 
 
PROCEDURE padstring (p_text IN OUT VARCHAR2); 
   
END IVZ_ENC_DEC; 
/


























































   CREATE SEQUENCE  "IVZ_USER_TYPE_MST_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 121 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "IVZ_USER_MST_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 141 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "IVZ_PRODUCTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;


































create or replace TRIGGER "BIU_IVZ_USER_MST_TRG"  
BEFORE INSERT OR UPDATE  ON IVZ_USER_MST   
FOR EACH ROW   
BEGIN   
  	CASE   
    WHEN INSERTING THEN   
    	:new.CREATED_BY := v('APP_USER');   
        :new.CREATED_ON := sysdate;            
    WHEN UPDATING THEN       
    	:new.UPDATED_BY := v('APP_USER');   
        :new.UPDATED_ON := sysdate;   
	END CASE;   
END; 
/
create or replace TRIGGER "BIU_IVZ_USER_TYPE_MST_TRG"  
BEFORE INSERT OR UPDATE  ON IVZ_USER_TYPE_MST  
FOR EACH ROW  
BEGIN  
    CASE  
        WHEN INSERTING THEN  
            :new.CREATED_BY :=v('APP_USER');  
            :new.CREATED_ON :=sysdate;           
        WHEN UPDATING THEN  
            :new.UPDATED_BY :=v('APP_USER');  
            :new.UPDATED_ON :=sysdate;  
    END CASE;  
END; 
/
create or replace TRIGGER "BI_IVZ_USER_MST"  
  before insert on "IVZ_USER_MST"                
  for each row   
begin    
  if :NEW."USER_ID" is null then  
    select "IVZ_USER_MST_SEQ".nextval into :NEW."USER_ID" from sys.dual;  
  end if;  
end; 
/
create or replace TRIGGER "BI_IVZ_USER_TYPE_MST"  
  before insert on "IVZ_USER_TYPE_MST"                
  for each row   
begin    
  if :NEW."USER_TYPE_ID" is null then  
    select "IVZ_USER_TYPE_MST_SEQ".nextval into :NEW."USER_TYPE_ID" from sys.dual;  
  end if;  
end; 
/

   COMMENT ON COLUMN "IVZ_PURCHASES"."STATUS" IS '(pending,received)';

  CREATE OR REPLACE EDITIONABLE TRIGGER "BI_IVZ_USER_MST" 
  before insert on "IVZ_USER_MST"                
  for each row   
begin    
  if :NEW."USER_ID" is null then  
    select "IVZ_USER_MST_SEQ".nextval into :NEW."USER_ID" from sys.dual;  
  end if;  
end; 

/
ALTER TRIGGER "BI_IVZ_USER_MST" ENABLE;
  CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_IVZ_USER_MST_TRG" 
BEFORE INSERT OR UPDATE  ON IVZ_USER_MST   
FOR EACH ROW   
BEGIN   
  	CASE   
    WHEN INSERTING THEN   
    	:new.CREATED_BY := v('APP_USER');   
        :new.CREATED_ON := sysdate;            
    WHEN UPDATING THEN       
    	:new.UPDATED_BY := v('APP_USER');   
        :new.UPDATED_ON := sysdate;   
	END CASE;   
END; 

/
ALTER TRIGGER "BIU_IVZ_USER_MST_TRG" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_IVZ_USER_TYPE_MST_TRG" 
BEFORE INSERT OR UPDATE  ON IVZ_USER_TYPE_MST  
FOR EACH ROW  
BEGIN  
    CASE  
        WHEN INSERTING THEN  
            :new.CREATED_BY :=v('APP_USER');  
            :new.CREATED_ON :=sysdate;           
        WHEN UPDATING THEN  
            :new.UPDATED_BY :=v('APP_USER');  
            :new.UPDATED_ON :=sysdate;  
    END CASE;  
END; 

/
ALTER TRIGGER "BIU_IVZ_USER_TYPE_MST_TRG" ENABLE;
  CREATE OR REPLACE EDITIONABLE TRIGGER "BI_IVZ_USER_TYPE_MST" 
  before insert on "IVZ_USER_TYPE_MST"                
  for each row   
begin    
  if :NEW."USER_TYPE_ID" is null then  
    select "IVZ_USER_TYPE_MST_SEQ".nextval into :NEW."USER_TYPE_ID" from sys.dual;  
  end if;  
end; 

/
ALTER TRIGGER "BI_IVZ_USER_TYPE_MST" ENABLE;







































  CREATE UNIQUE INDEX "IVZ_ADJUSTMENTS_PK" ON "IVZ_ADJUSTMENTS" ("ID") 
  ;

  CREATE UNIQUE INDEX "IVZ_CATEGORIES_PK" ON "IVZ_CATEGORIES" ("ID") 
  ;

  CREATE UNIQUE INDEX "IVZ_CUSTOMERS_PK" ON "IVZ_CUSTOMERS" ("ID") 
  ;

  CREATE UNIQUE INDEX "IVZ_PAYMENTS_PK" ON "IVZ_PAYMENTS" ("ID") 
  ;

  CREATE UNIQUE INDEX "SYS_IL0000495381C00012$$" ON "IVZ_PRODUCTS" (
  ;
  CREATE UNIQUE INDEX "IVZ_PRODUCTS_PK" ON "IVZ_PRODUCTS" ("ID") 
  ;

  CREATE UNIQUE INDEX "IVZ_PURCHASES_PK" ON "IVZ_PURCHASES" ("ID") 
  ;

   COMMENT ON COLUMN "IVZ_PURCHASES"."STATUS" IS '(pending,received)';

  CREATE UNIQUE INDEX "IVZ_PURCHASE_ITEMS_PK" ON "IVZ_PURCHASE_ITEMS" ("ID") 
  ;

  CREATE UNIQUE INDEX "IVZ_SALES_PK" ON "IVZ_SALES" ("ID") 
  ;

  CREATE UNIQUE INDEX "IVZ_SALES_ITEMS_PK" ON "IVZ_SALES_ITEMS" ("ID") 
  ;

  CREATE UNIQUE INDEX "IVZ_STOCK_TRANSACTIONS_PK" ON "IVZ_STOCK_TRANSACTIONS" ("ID") 
  ;

  CREATE UNIQUE INDEX "IVZ_SUPPLIERS_PK" ON "IVZ_SUPPLIERS" ("ID") 
  ;

  CREATE UNIQUE INDEX "IVZ_USER_MST_PK" ON "IVZ_USER_MST" ("USER_ID") 
  ;
  CREATE UNIQUE INDEX "IVZ_USER_MST_UNQ_CON" ON "IVZ_USER_MST" ("USERNAME") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "BI_IVZ_USER_MST" 
  before insert on "IVZ_USER_MST"                
  for each row   
begin    
  if :NEW."USER_ID" is null then  
    select "IVZ_USER_MST_SEQ".nextval into :NEW."USER_ID" from sys.dual;  
  end if;  
end; 

/
ALTER TRIGGER "BI_IVZ_USER_MST" ENABLE;
  CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_IVZ_USER_MST_TRG" 
BEFORE INSERT OR UPDATE  ON IVZ_USER_MST   
FOR EACH ROW   
BEGIN   
  	CASE   
    WHEN INSERTING THEN   
    	:new.CREATED_BY := v('APP_USER');   
        :new.CREATED_ON := sysdate;            
    WHEN UPDATING THEN       
    	:new.UPDATED_BY := v('APP_USER');   
        :new.UPDATED_ON := sysdate;   
	END CASE;   
END; 

/
ALTER TRIGGER "BIU_IVZ_USER_MST_TRG" ENABLE;

  CREATE UNIQUE INDEX "IVZ_USER_TYPE_MST_PK" ON "IVZ_USER_TYPE_MST" ("USER_TYPE_ID") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "BIU_IVZ_USER_TYPE_MST_TRG" 
BEFORE INSERT OR UPDATE  ON IVZ_USER_TYPE_MST  
FOR EACH ROW  
BEGIN  
    CASE  
        WHEN INSERTING THEN  
            :new.CREATED_BY :=v('APP_USER');  
            :new.CREATED_ON :=sysdate;           
        WHEN UPDATING THEN  
            :new.UPDATED_BY :=v('APP_USER');  
            :new.UPDATED_ON :=sysdate;  
    END CASE;  
END; 

/
ALTER TRIGGER "BIU_IVZ_USER_TYPE_MST_TRG" ENABLE;
  CREATE OR REPLACE EDITIONABLE TRIGGER "BI_IVZ_USER_TYPE_MST" 
  before insert on "IVZ_USER_TYPE_MST"                
  for each row   
begin    
  if :NEW."USER_TYPE_ID" is null then  
    select "IVZ_USER_TYPE_MST_SEQ".nextval into :NEW."USER_TYPE_ID" from sys.dual;  
  end if;  
end; 

/
ALTER TRIGGER "BI_IVZ_USER_TYPE_MST" ENABLE;














create or replace PACKAGE BODY "IVZ_CUSTOM_AUTH" AS  
 
FUNCTION IVZ_auth_right(p_app_user IN VARCHAR, p_usertype IN VARCHAR2) 
RETURN BOOLEAN 
IS 
	l_usr_type VARCHAR2(20); 
BEGIN 
	SELECT UPPER(USER_TYPE_NAME) INTO l_usr_type  
	FROM IVZ_USER_TYPE_MST 
	WHERE USER_TYPE_ID = (SELECT USER_TYPE_ID FROM IVZ_USER_MST WHERE UPPER(USERNAME) = UPPER(p_app_user)); 
 
	IF NVL(l_usr_type,'X') = p_usertype THEN 
		--HTP.P('TRUE'); 
		RETURN TRUE; 
	ELSE 
		HTP.P('TRUE'); 
		--RETURN FALSE; 
	END IF;  
 
    --EXCEPTION WHEN NO_DATA_FOUND THEN logger.log_error('User Not Found'); 
        --RETURN FALSE;  
END IVZ_auth_right;  
  
END IVZ_CUSTOM_AUTH; 
/
create or replace PACKAGE BODY "IVZ_CUSTOM_LOGIN" AS  
 
FUNCTION IVZ_login(p_username IN VARCHAR2, p_password IN VARCHAR2)  
RETURN BOOLEAN  
IS 
    v_count NUMBER;  
    l_password  IVZ_USER_MST.password%type; 
BEGIN   
	--Check whether user exists with username or not.. if exists match password and Return TRUE else Return FALSE 
    SELECT count(*) into v_count   
    FROM IVZ_USER_MST   
    WHERE TRIM(UPPER(USERNAME)) = TRIM(UPPER(p_username)); 
             
    IF v_count >= 1 THEN        
         
        select IVZ_ENC_DEC.decrypt_pwd(password) 
        into l_password  
        FROM IVZ_USER_MST   
        WHERE TRIM(UPPER(USERNAME)) = TRIM(UPPER(p_username)); 
   
        -- Compare the two, and if there is a match, Return TRUE else Return FALSE 
        IF p_password = l_password THEN 
            APEX_UTIL.SET_AUTHENTICATION_RESULT(0); 
            RETURN true; 
        ELSE 
            APEX_UTIL.SET_AUTHENTICATION_RESULT(4); 
            RETURN false; 
        END IF; 
    ELSE  
        RETURN FALSE;  
    END IF;  
        
    --EXCEPTION WHEN NO_DATA_FOUND THEN logger.log_error('User Not Found'); 
        RETURN FALSE;  
END IVZ_login;  
  
END IVZ_CUSTOM_LOGIN;
/
create or replace PACKAGE BODY IVZ_ENC_DEC AS 
 
    g_key     RAW(32767)  := UTL_RAW.cast_to_raw('1a2b3c4d'); 
    g_pad_chr VARCHAR2(1) := '~'; 
 
---------------------ENCRYPTION------------------------------- 
 
FUNCTION encrypt_pwd (p_text IN VARCHAR2)  
RETURN RAW  
IS 
    l_text       VARCHAR2(32767) := p_text; 
    l_encrypted  RAW(32767); 
BEGIN 
    padstring(l_text); 
 
    DBMS_OBFUSCATION_TOOLKIT.desencrypt( 
        input  => UTL_RAW.cast_to_raw(l_text), 
        key    => g_key, 
        encrypted_data => l_encrypted); 
 
    RETURN l_encrypted; 
END encrypt_pwd; 
   
---------------------DECRYPTION-------------------------------  
 
FUNCTION decrypt_pwd (p_raw IN RAW)  
RETURN VARCHAR2  
IS 
    l_decrypted  VARCHAR2(32767); 
BEGIN 
    DBMS_OBFUSCATION_TOOLKIT.desdecrypt( 
        input => p_raw, 
        key   => g_key, 
        decrypted_data => l_decrypted); 
                                             
        RETURN RTrim(UTL_RAW.cast_to_varchar2(l_decrypted), g_pad_chr); 
END decrypt_pwd; 
 
----------------------PADSTRING------------------------------  
PROCEDURE padstring (p_text IN OUT VARCHAR2)  
IS 
    l_units  NUMBER; 
BEGIN 
    IF LENGTH(p_text) MOD 8 > 0 THEN 
        l_units := TRUNC(LENGTH(p_text) / 8) + 1; 
        p_text  := RPAD(p_text, l_units * 8, g_pad_chr); 
    END IF; 
END padstring; 
     
END IVZ_ENC_DEC; 
/
























































